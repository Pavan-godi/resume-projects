# -*- coding: utf-8 -*-
"""Machinedowntime.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9CyPDE6UE5BScBLfvpE8c73D36FFVVr
"""

from google.colab import drive
drive.mount('googledrive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

!ls googledrive

data = pd.read_csv('googledrive/MyDrive/Machine_dataset.csv')
data.head()

def eda(data):
  numerical_cols = data.select_dtypes(include = np.number).columns.tolist()
  categorical_cols = data.select_dtypes(include = 'object').columns.tolist()

  mean_values = data[numerical_cols].mean()

  varience_values = data[numerical_cols].var()

  skewness_values = data[numerical_cols].skew()

  kurtosis_values = data[numerical_cols].kurtosis()

  return mean_values, varience_values, skewness_values, kurtosis_values

mean_raw, varience_raw, skewness_raw, kurtosis_raw = eda(data)

print("EDA on Raw Data:")
print("\nMean Values:")
print(mean_raw)
print("\nVarience Values:")
print(varience_raw)
print("\nSkewness Values:")
print(skewness_raw)
print("\nKurtosis Values:")
print(kurtosis_raw)

missing_values = data.isnull().sum()
print("\nMissing Values:")
print(missing_values)

numerical_cols = data.select_dtypes(include = np.number).columns.tolist()
datafill = data.fillna(data[numerical_cols].mean())
missing_values = datafill.isnull().sum()
print("\nMissing Values:")
print(missing_values)

data['Date'] = pd.to_datetime(data['Date'], errors='coerce')


mean_filled, varience_filled, skewness_filled, kurtosis_filled = eda(datafill)
print("\nEDA on Cleaned Data:")
print("\nMean Values:")
print(mean_filled)
print("\nVariance Values:")
print(varience_filled)
print("\nSkewness Values:")
print(skewness_filled)
print("\nKurtosis Values:")
print(kurtosis_filled)

numerical_cols = datafill.select_dtypes(include=['float64', 'int64']).columns

for col in numerical_cols:
    plt.figure(figsize=(10, 6))
    sns.histplot(data[col], kde=True)
    plt.title(f'Histogram of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

data1 = pd.read_csv('googledrive/MyDrive/downtimeanalysis.csv')
data1

data1.columns = ['Machine_ID', 'Machine_Failures', 'Not_Machine_Failures']

# Plot
plt.figure(figsize=(8, 4))

# Create a bar plot for Machine Failures
sns.barplot(x='Machine_ID', y='Machine_Failures', data=data1, color='r', label='Machine Failures')

# Create a bar plot for Not Machine Failures (stacked on top of Machine Failures)
sns.barplot(x='Machine_ID', y='Not_Machine_Failures', data=data1, bottom=data1['Machine_Failures'], color='g', label='Not Machine Failures')

plt.title('Machine Failures and Not Machine Failures by Machine ID')
plt.xlabel('Machine ID')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.legend()
plt.show()

data2 = pd.read_csv('googledrive/MyDrive/sample_machine_data.csv')
data2

data2['Date'] = pd.to_datetime(data2['Date'])
numerical_data = data2.select_dtypes(include=['number'])
data2.columns = ['Date', 'Machine_ID', 'Assembly_Line_No', 'Hydraulic_Pressure', 'Coolant_Pressure', 'Air_System_Pressure',
              'Coolant_Temperature', 'Hydraulic_Oil_Temperature', 'Spindle_Bearing_Temperature', 'Spindle_Vibration',
              'Tool_Vibration', 'Spindle_Speed', 'Voltage', 'Torque', 'Cutting', 'Downtime']

# Calculate the correlation matrix
correlation_matrix = numerical_data.corr()

# Plot the heatmap
plt.figure(figsize=(7, 6))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Operational Parameters')
plt.show()